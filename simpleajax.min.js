/*!
* SimpleAJAX
*
* @version   0.2
* @author    Victor Villaverde Laan
* @link      http://www.freelancephp.net/simpleajax-small-ajax-javascript-object/
* @license   MIT license
*/
var SimpleAJAX = Ajax = { xhr: null, settings: { url: '', type: 'GET', dataType: 'text', async: true, cache: true, data: null, contentType: 'application/x-www-form-urlencoded', success: null, error: null, complete: null, accepts: { text: 'text/plain', html: 'text/html', xml: 'application/xml, text/xml', json: 'application/json, text/javascript'} }, call: function (options) { var self = this, xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP'), opts = (function (s, o) { var opts = {}; for (var key in s) opts[key] = (typeof o[key] == 'undefined') ? s[key] : o[key]; return opts; })(this.settings, options), ready = function () { if (xhr.readyState == 4) { if (xhr.status == 200) { var data = (opts.dataType == 'xml') ? xhr.responseXML : xhr.responseText; if (opts.dataType == 'json') data = self.parseJSON(data); if (self.isFunction(opts.success)) opts.success.call(opts, data, xhr.status, xhr); } else { if (self.isFunction(opts.error)) opts.error.call(opts, xhr, xhr.status); } if (self.isFunction(opts.complete)) opts.complete.call(opts, xhr, xhr.status); } }; this.xhr = xhr; if (!opts.cache) opts.url += ((opts.url.indexOf('?') > -1) ? '&' : '?') + '_nocache=' + (new Date()).getTime(); if (opts.data) { if (opts.type == 'GET') { opts.url += ((opts.url.indexOf('?') > -1) ? '&' : '?') + this.param(opts.data); opts.data = null; } else { opts.data = this.param(opts.data); } } xhr.open(opts.type, opts.url, opts.async); xhr.setRequestHeader('Content-type', opts.contentType); if (opts.dataType && opts.accepts[opts.dataType]) xhr.setRequestHeader('Accept', opts.accepts[opts.dataType]); if (opts.async) { xhr.onreadystatechange = ready; xhr.send(opts.data); } else { xhr.send(opts.data); ready(); } return this; }, get: function (url, data, success) { if (this.isFunction(data)) { success = data; data = null; } return this.call({ url: url, type: 'GET', data: data, success: success }); }, post: function (url, data, success) { if (this.isFunction(data)) { success = data; data = null; } return this.call({ url: url, type: 'POST', data: data, success: success }); }, load: function (el, url, data, complete) { if (typeof el == 'string') el = document.getElementById(el); this.call({ url: url, type: data ? 'POST' : 'GET', data: data || null, complete: complete || null, success: function (html) { try { el.innerHTML = html; } catch (e) { var ph = document.createElement('div'); ph.innerHTML = html; while (el.firstChild) el.removeChild(el.firstChild); for (var x = 0, max = ph.childNodes.length; x < max; x++) el.appendChild(ph.childNodes[x]); } } }); return this; }, param: function (obj) { var s = []; for (var key in obj) { s.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key])); } return s.join('&'); }, parseJSON: function (data) { if (typeof data !== 'string' || !data) return null; return eval('(' + this.trim(data) + ')'); }, trim: function (str) { return str.replace(/^\s+/, '').replace(/\s+$/, ''); }, isFunction: function (obj) { return (Object.prototype.toString.call(obj) === "[object Function]"); } };